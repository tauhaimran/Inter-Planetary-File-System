#pragma once

..............................................................................................................

class router {

private:

	std::string traversed_path;

public:

	router() :traversed_path("") {};

    //takes FT and returns the next node...
	void route_next_node(Node* &currnt , std::string ID ,BigInteger &srch_val );

    //routes the node pointer to the user selected machine...
	Node* route_to_node(Node* start = nullptr, BigInteger endID);
    
    //stores and clears routing history buffers
    void terminate_routing();

};

..............................................................................................................

class hashing {
private:

	BigInteger modulous;

public:

	hashing(int bits = 0 ):modulous(BigInteger("2")){...}

	void displaymodval();

    std::string convert_to_binary(std::string hex_str){}

    BigInteger convert_to_decimal(std::string binary_str) {}

    void SHR(std::string &bits) { //rightshift }

}; 


..............................................................................................................

class SHA1x
{


private:

    //using macros manipulate memory correctly
    typedef unsigned long int int32;   /* just needs to be at least 32bit */
    typedef unsigned long long int64;  /* just needs to be at least 64bit */

    //contents...
    static const unsigned int DIGEST_h = 5;  /*sha1_h[5] integers per SHA1 digest  */
    static const unsigned int BLOCK_INTS = 16;  /* number of 32bit integers per SHA1 block */
    static const unsigned int BLOCK_BYTES = BLOCK_INTS * 4;

    //makes 32 bit integers
    int32 digest[DIGEST_h];
    std::string buffer; //our output string
    int64 numTansforms;//encryptions stored in here

    void reset();
    void sha1x_function(int32 block[BLOCK_BYTES]);

    static void buffer_to_block(const std::string& buffer, int32 block[BLOCK_BYTES]);
    static void readXtract(std::istream& is, std::string& s, int max);

public:
    SHA1x();//empty constructor
    void sha1x_update(const std::string& s);
    void sha1x_update(std::istream& is);
    std::string sha1x_final();
    static std::string from_file(const std::string& filename);

};



//-------the function to call---------
std::string sha1x(const std::string& string);
//------------------------------------